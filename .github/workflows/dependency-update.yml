name: Dependency Updates

on:
  schedule:
    # Run weekly on Sundays at 6 AM UTC
    - cron: '0 6 * * 0'
  workflow_dispatch:

jobs:
  check-updates:
    name: Check for Updates
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Check frontend dependencies
        run: |
          cd frontend
          npm outdated || echo "No outdated dependencies found"
        continue-on-error: true
          
      - name: Check backend dependencies
        run: |
          cd backend
          npm outdated || echo "No outdated dependencies found"
        continue-on-error: true
        if: hashFiles('backend/**') != ''
        
      - name: Create issue for updates
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');
            
            try {
              // Check frontend updates
              const frontendUpdates = execSync('cd frontend && npm outdated --json', { encoding: 'utf8' });
              const frontendData = JSON.parse(frontendUpdates);
              
              if (Object.keys(frontendData).length > 0) {
                let body = '## ðŸ”„ Frontend Dependencies Need Updates\n\n';
                body += '| Package | Current | Wanted | Latest |\n';
                body += '|---------|---------|--------|--------|\n';
                
                Object.entries(frontendData).forEach(([pkg, info]) => {
                  body += `| ${pkg} | ${info.current} | ${info.wanted} | ${info.latest} |\n`;
                });
                
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: 'ðŸ”„ Dependency Updates Available',
                  body: body,
                  labels: ['dependencies', 'automated']
                });
              }
            } catch (error) {
              console.log('No frontend updates needed or error occurred');
            }
            
            try {
              // Check backend updates
              const backendUpdates = execSync('cd backend && npm outdated --json', { encoding: 'utf8' });
              const backendData = JSON.parse(backendUpdates);
              
              if (Object.keys(backendData).length > 0) {
                let body = '## ðŸ”„ Backend Dependencies Need Updates\n\n';
                body += '| Package | Current | Wanted | Latest |\n';
                body += '|---------|---------|--------|--------|\n';
                
                Object.entries(backendData).forEach(([pkg, info]) => {
                  body += `| ${pkg} | ${info.current} | ${info.wanted} | ${info.latest} |\n`;
                });
                
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: 'ðŸ”„ Backend Dependency Updates Available',
                  body: body,
                  labels: ['dependencies', 'automated']
                });
              }
            } catch (error) {
              console.log('No backend updates needed or error occurred');
            } 